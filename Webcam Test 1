#!/usr/bin/env python3

import wpilib
from wpilib import RobotDrive
import wpilib.buttons

import cv2
import numpy as np

from cscore import CameraServer

class MyRobot(wpilib.IterativeRobot):

    frontLeftChannel  = 2
    rearLeftChannel   = 1
    frontRightChannel = 3
    rearRightChannel  = 4

        

    joystickChannel   = 0


def main():
    cs = CameraServer.getInstance()
    cs.enableLogging()

    camera = cs.startAutomaticCapture()

    camera.setResolution(160, 120)
    camera.setFPS(20)
    
    cvSink = cs.getVideo()

   
    outputStream = cs.putVideo("Rectangle", 320, 240)

    img = np.zeros(shape=(120, 160, 3), dtype=np.uint8)

    while True:

        time, img = cvSink.grabFrame(img)
        if time == 0:
            
            outputStream.notifyError(cvSink.getError());
 
            continue

        outputStream.putFrame(img)

    def robotInit(self):
        '''Robot initialization function'''

        if not wpilib.RobotBase.isSimulation():
            import ctre

            self.FLC = ctre.CANTalon(self.frontLeftChannel)
            self.FRC = ctre.CANTalon(self.frontRightChannel)
            self.RRC = ctre.CANTalon(self.rearRightChannel)
            self.RLC = ctre.CANTalon(self.rearLeftChannel)

        else:
            self.RRC = wpilib.Talon(self.rearRightChannel)
            self.RLC = wpilib.Talon(self.rearLeftChannel)
            self.FRC = wpilib.Talon(self.frontRightChannel)
            self.FLC = wpilib.Talon(self.frontLeftChannel)
            
        self.stick = wpilib.Joystick(self.joystickChannel)
        self.winch_motor1 = wpilib.Talon(7)
        self.winch_motor2 = wpilib.Talon(8)

        self.robotDrive = wpilib.RobotDrive(self.FLC,
                                           self.RLC,
                                           self.FRC,
                                           self.RRC)
        
        self.robotDrive.setExpiration(0.1)

        self.robotDrive.setInvertedMotor(RobotDrive.MotorType.kFrontLeft, True)

        self.robotDrive.setInvertedMotor(RobotDrive.MotorType.kRearLeft, True)


        self.winch_forward = wpilib.buttons.JoystickButton(self.stick, 5) 
        self.winch_backward = wpilib.buttons.JoystickButton(self.stick, 6)

        self.flip = wpilib.buttons.JoystickButton(self.stick, 1)
        self.open_double = wpilib.buttons.JoystickButton(self.stick, 3)
        self.close_double = wpilib.buttons.JoystickButton(self.stick, 4)

        self.single_solenoid = wpilib.Solenoid(1)
        self.double_solenoid = wpilib.DoubleSolenoid(2,3)

    def teleopPeriodic(self):


        self.robotDrive.mecanumDrive_Cartesian(self.stick.getX(),
                                                   self.stick.getY(),
                                                   self.stick.getRawAxis(4), 0)
        if (self.winch_forward.get()):
            self.winch_motor1.set(1)
            self.winch_motor2.set(1)
        elif (self.winch_backward.get()):
            self.winch_motor1.set(-1)
            self.winch_motor2.set(-1)
        elif (True):
            self.winch_motor1.set(0)
            self.winch_motor2.set(0)
        
        if (self.flip.get()):
            self.single_solenoid.set(True)
        else:
            self.single_solenoid.set(False)

        if (self.open_double.get()):
            self.double_solenoid.set(wpilib.DoubleSolenoid.Value.kForward)

        elif (self.close_double.get()):
            self.double_solenoid.set(wpilib.DoubleSolenoid.Value.kReverse)
        

if __name__ == '__main__':
    wpilib.run(MyRobot)
